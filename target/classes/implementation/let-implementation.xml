<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:file="http://www.mulesoft.org/schema/mule/file" xmlns:dw="http://www.mulesoft.org/schema/mule/ee/dw" xmlns:validation="http://www.mulesoft.org/schema/mule/validation" xmlns:crc32="http://www.mulesoft.org/schema/mule/crc32" xmlns:http="http://www.mulesoft.org/schema/mule/http" xmlns:oauth2-provider="http://www.mulesoft.org/schema/mule/oauth2-provider" xmlns:json="http://www.mulesoft.org/schema/mule/json" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:tracking="http://www.mulesoft.org/schema/mule/ee/tracking" xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd
http://www.mulesoft.org/schema/mule/ee/tracking http://www.mulesoft.org/schema/mule/ee/tracking/current/mule-tracking-ee.xsd
http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/json http://www.mulesoft.org/schema/mule/json/current/mule-json.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.mulesoft.org/schema/mule/ee/dw http://www.mulesoft.org/schema/mule/ee/dw/current/dw.xsd
http://www.mulesoft.org/schema/mule/file http://www.mulesoft.org/schema/mule/file/current/mule-file.xsd">
    <file:connector name="File6" autoDelete="true" outputAppend="true" streaming="true" validateConnections="true" doc:name="File"/>
	<flow name="LetGetAllFlow">
		<db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[SELECT l.LetID ,l.DatumPolaska, l.VremePolaska, l.Status, l.Terminal , l.SlobodnoBizKlasa, l.SlobodnoEkoKlasa,l.AvionID,a.Marka,a.Model,a.UkupnoBizKlasa,a.UkupnoEkoKlasa,l.KompanijaID, k.NazivAK,l.DestinacijaID,d.NazivAerodroma,d.Grad,l.PilotID,p.ImeP,p.PrezimeP,p.JMBGP,p.KontaktP,p.AdresaP,p.mail 
			from db.Let as l inner join db.Avion as a on (a.AvionID=l.AvionID) inner join db.Destinacija as d on (l.DestinacijaID=d.DestinacijaID) inner join db.AvioKompanija as k on (k.KompanijaID=l.KompanijaID) inner join db.Pilot as p on (p.PilotID=l.PilotID)]]></db:dynamic-query>
		</db:select>
		<dw:transform-message doc:name="Transform Message">
			<dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload map ((payload01 , indexOfPayload01) -> {
	LetID: payload01.LetID,
	DatumPolaska: payload01.DatumPolaska,
	VremePolaska: payload01.VremePolaska,
	Status: payload01.Status,
	Terminal: payload01.Terminal,
	SlobodnoBizKlasa: payload01.SlobodnoBizKlasa,
	SlobodnoEkoKlasa: payload01.SlobodnoEkoKlasa,
	Avion: {
		AvionID: payload01.AvionID,
		Marka: payload01.Marka,
		Model: payload01.Model,
		UkupnoBizKlasa: payload01.UkupnoBizKlasa,
		UkupnoEkoKlasa: payload01.UkupnoBizKlasa
	},
	Destinacija: {
		DestinacijaID: payload01.DestinacijaID,
		NazivAerodroma: payload01.NazivAerodroma,
		Grad: payload01.Grad
	},
	AvioKompanija: {
		KompanijaID: payload01.KompanijaID,
		NazivAK: payload01.NazivAK
	},
	Pilot: {
		PilotID: payload01.PilotID,
		ImeP: payload01.ImeP,
		PrezimeP: payload01.PrezimeP,
		JMBGP: payload01.JMBGP,
		KontaktP: payload01.KontaktP,
		AdresaP: payload01.AdresaP,
		mail: payload01.mail
	}
	})]]></dw:set-payload>
		</dw:transform-message>
		<async doc:name="Async">
            <flow-ref name="LetLogging" doc:name="Flow Reference"/>
        </async>
		<set-payload value="#[payload]" doc:name="Set Payload"/>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-property propertyName="http.status" value="500" doc:name="Property"/>
            <set-payload value="{message:&quot;Error&quot;}" doc:name="Set Payload"/>
        </catch-exception-strategy>
	</flow>
	<flow name="LetPostFlow">
		<async doc:name="Async">
            <flow-ref name="LetLogging" doc:name="Flow Reference"/>
        </async>
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<db:insert config-ref="MySQL_Configuration" doc:name="Database">
			<db:parameterized-query><![CDATA[INSERT INTO db.Let
(DatumPolaska,VremePolaska,Status,Terminal,SlobodnoBizKlasa,SlobodnoEkoKlasa,AvionID,KompanijaID,DestinacijaID,PilotID)
VALUES (#[payload.DatumPolaska],#[payload.VremePolaska],#[payload.Status],#[payload.Terminal],#[payload.SlobodnoBizKlasa],#[payload.SlobodnoEkoKlasa],#[payload.AvionID],#[payload.KompanijaID],#[payload.DestinacijaID],#[payload.PilotID])]]></db:parameterized-query>
		</db:insert>
		<choice doc:name="Choice">
			<when expression="#[payload != 1]">
				<set-property propertyName="http.status" value="400" doc:name="Property"/>
				<set-payload value="{&quot;message&quot;:&quot;Greska pri dodavanju leta!!&quot;}" doc:name="Set Payload"/>
			</when>
			<otherwise>
				<set-property propertyName="http.status" value="201" doc:name="Property"/>
				<set-payload value="{&quot;message&quot;:&quot;Uspesno ste se dodali let!&quot;}" doc:name="Set Payload"/>
			</otherwise>
		</choice>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-property propertyName="http.status" value="500" doc:name="Property"/>
            <set-payload value="{message:&quot;Error&quot;}" doc:name="Set Payload"/>
        </catch-exception-strategy>
	</flow>
	<flow name="LetGetByAvionFlow">
		<db:select config-ref="MySQL_Configuration" doc:name="Database">
			<db:dynamic-query><![CDATA[select * from db.Let where AvionID= #[Integer.parseInt(message.inboundProperties.'http.uri.params'.id)]]]></db:dynamic-query>
		</db:select>
		<choice doc:name="Choice">
			<when expression="#[payload.size()==0]">
				<set-property propertyName="http.status" value="404" doc:name="Property"/>
				<set-payload value="{&quot;message&quot;:&quot;Let not found!&quot;}" doc:name="Set Payload"/>
			</when>
			<otherwise>
				<set-property propertyName="http.status" value="200" doc:name="Property"/>
				<set-payload value="#[payload]" doc:name="Set Payload"/>
			</otherwise>
		</choice>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-property propertyName="http.status" value="500" doc:name="Property"/>
            <set-payload value="{message:&quot;Error&quot;}" doc:name="Set Payload"/>
        </catch-exception-strategy>
	</flow>
	<flow name="LetGetByPilotFlow">
		<db:select config-ref="MySQL_Configuration" doc:name="Database">
			<db:dynamic-query><![CDATA[select * from db.Let where PilotID= #[Integer.parseInt(message.inboundProperties.'http.uri.params'.id)]]]></db:dynamic-query>
		</db:select>
		<choice doc:name="Choice">
			<when expression="#[payload.size()==0]">
				<set-property propertyName="http.status" value="404" doc:name="Property"/>
				<set-payload value="{&quot;message&quot;:&quot;Let not found!&quot;}" doc:name="Set Payload"/>
			</when>
			<otherwise>
				<set-property propertyName="http.status" value="200" doc:name="Property"/>
				<set-payload value="#[payload]" doc:name="Set Payload"/>
			</otherwise>
		</choice>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-property propertyName="http.status" value="500" doc:name="Property"/>
            <set-payload value="{message:&quot;Error&quot;}" doc:name="Set Payload"/>
        </catch-exception-strategy>
	</flow>
	<flow name="LetGetByIDFlow">
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:dynamic-query><![CDATA[SELECT l.LetID ,l.DatumPolaska, l.VremePolaska, l.Status, l.Terminal , l.SlobodnoBizKlasa, l.SlobodnoEkoKlasa,l.AvionID,a.Marka,a.Model,a.UkupnoBizKlasa,a.UkupnoEkoKlasa,l.KompanijaID, k.NazivAK,l.DestinacijaID,d.NazivAerodroma,d.Grad,l.PilotID,p.ImeP,p.PrezimeP,p.JMBGP,p.KontaktP,p.AdresaP,p.mail 
			from db.Let as l inner join db.Avion as a on (a.AvionID=l.AvionID) inner join db.Destinacija as d on (l.DestinacijaID=d.DestinacijaID) inner join db.AvioKompanija as k on (k.KompanijaID=l.KompanijaID) inner join db.Pilot as p on (p.PilotID=l.PilotID)
             where LetID= #[message.inboundProperties.'http.uri.params'.id]]]></db:dynamic-query>
        </db:select>
        <choice doc:name="Choice">
            <when expression="#[payload.size()!=1]">
                <set-property propertyName="http.status" value="404" doc:name="Property"/>
                <set-payload value="{&quot;message&quot;:&quot;Let not found!&quot;}" doc:name="Set Payload"/>
            </when>
            <otherwise>
            <dw:transform-message doc:name="Transform Message">
            <dw:set-payload><![CDATA[%dw 1.0
%output application/json
---
payload map ((payload01 , indexOfPayload01) -> {
	LetID: payload01.LetID,
	DatumPolaska: payload01.DatumPolaska,
	VremePolaska: payload01.VremePolaska,
	Status: payload01.Status,
	Terminal: payload01.Terminal,
	SlobodnoBizKlasa: payload01.SlobodnoBizKlasa,
	SlobodnoEkoKlasa: payload01.SlobodnoEkoKlasa,
	Avion: {
		AvionID: payload01.AvionID,
		Marka: payload01.Marka,
		Model: payload01.Model,
		UkupnoBizKlasa: payload01.UkupnoBizKlasa,
		UkupnoEkoKlasa: payload01.UkupnoBizKlasa
	},
	Destinacija: {
		DestinacijaID: payload01.DestinacijaID,
		NazivAerodroma: payload01.NazivAerodroma,
		Grad: payload01.Grad
	},
	AvioKompanija: {
		KompanijaID: payload01.KompanijaID,
		NazivAK: payload01.NazivAK
	},
	Pilot: {
		PilotID: payload01.PilotID,
		ImeP: payload01.ImeP,
		PrezimeP: payload01.PrezimeP,
		JMBGP: payload01.JMBGP,
		KontaktP: payload01.KontaktP,
		AdresaP: payload01.AdresaP,
		mail: payload01.mail
	}
	})]]></dw:set-payload>
        </dw:transform-message>
                <set-property propertyName="http.status" value="200" doc:name="Property"/>
                <set-payload value="#[payload]" doc:name="Set Payload"/>
            </otherwise>
        </choice>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-property propertyName="http.status" value="500" doc:name="Property"/>
            <set-payload value="{message:&quot;Error&quot;}" doc:name="Set Payload"/>
        </catch-exception-strategy>
    </flow>
	<flow name="LetPutByIDFlow">
		<json:json-to-object-transformer returnClass="java.util.HashMap" doc:name="JSON to Object"/>
		<db:update config-ref="MySQL_Configuration" doc:name="Database">
			<db:dynamic-query><![CDATA[UPDATE db.Let
set DatumPolaska= '#[payload.DatumPolaska]',
VremePolaska= '#[payload.VremePolaska]',
Status= #[payload.Status],
Terminal= '#[payload.Terminal]',
SlobodnoBizKlasa= '#[payload.SlobodnoBizKlasa]',
SlobodnoEkoKlasa= '#[payload.SlobodnoEkoKlasa]',
AvionID= #[Integer.parseInt(payload.AvionID)],
KompanijaID= #[Integer.parseInt(payload.KompanijaID)],
DestinacijaID= #[Integer.parseInt(payload.DestinacijaID)],
PilotID= #[Integer.parseInt(payload.PilotID)]
where LetID=#[message.inboundProperties.'http.uri.params'.id]]]></db:dynamic-query>
		</db:update>
		<choice doc:name="Choice">
			<when expression="#[payload != 1]">
				<set-property propertyName="http.status" value="400" doc:name="Property"/>
				<set-payload value="{&quot;message&quot;:&quot;Cant update let&quot;}" doc:name="Set Payload"/>
			</when>
			<otherwise>
				<set-property propertyName="http.status" value="200" doc:name="Property"/>
				<set-payload value="{&quot;message&quot;:&quot;Let updated!&quot;}" doc:name="Set Payload"/>
			</otherwise>
		</choice>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-property propertyName="http.status" value="500" doc:name="Property"/>
            <set-payload value="{message:&quot;Error&quot;}" doc:name="Set Payload"/>
        </catch-exception-strategy>
	</flow>
	<flow name="LetDeleteByIdFlow">
		<db:delete config-ref="MySQL_Configuration" doc:name="Database">
			<db:dynamic-query><![CDATA[Delete from db.Let where LetID= #[message.inboundProperties.'http.uri.params'.id]]]></db:dynamic-query>
		</db:delete>
		<choice doc:name="Choice">
			<when expression="#[payload != 1]">
				<set-property propertyName="http.status" value="400" doc:name="Property"/>
				<set-payload value="{&quot;message&quot;:&quot;Cant delete the Let&quot;}" doc:name="Payload"/>
			</when>
			<otherwise>
				<set-property propertyName="http.status" value="200" doc:name="Property"/>
				<set-payload value="{&quot;message&quot;:&quot;Let deleted!&quot;}" doc:name="Payload"/>
			</otherwise>
		</choice>
		<catch-exception-strategy doc:name="Catch Exception Strategy">
            <set-property propertyName="http.status" value="500" doc:name="Property"/>
            <set-payload value="{message:&quot;Error&quot;}" doc:name="Set Payload"/>
        </catch-exception-strategy>
	</flow>
	<flow name="LetLogging">
        <json:object-to-json-transformer doc:name="Object to JSON"/>
        <file:outbound-endpoint path="../files" outputPattern="letGet.txt" connector-ref="File6" responseTimeout="10000" doc:name="File"/>
    </flow>
</mule>
